// Code generated by protoc-gen-go. DO NOT EDIT.
// source: os.proto

/*
Package os is a generated protocol buffer package.

It is generated from these files:
	os.proto

It has these top-level messages:
	MkdirInput
	SingleString
	FileInfo
	Empty
*/
package os

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MkdirInput struct {
	P string `protobuf:"bytes,1,opt,name=p" json:"p,omitempty"`
	M uint32 `protobuf:"varint,2,opt,name=m" json:"m,omitempty"`
}

func (m *MkdirInput) Reset()                    { *m = MkdirInput{} }
func (m *MkdirInput) String() string            { return proto.CompactTextString(m) }
func (*MkdirInput) ProtoMessage()               {}
func (*MkdirInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MkdirInput) GetP() string {
	if m != nil {
		return m.P
	}
	return ""
}

func (m *MkdirInput) GetM() uint32 {
	if m != nil {
		return m.M
	}
	return 0
}

type SingleString struct {
	S string `protobuf:"bytes,1,opt,name=s" json:"s,omitempty"`
}

func (m *SingleString) Reset()                    { *m = SingleString{} }
func (m *SingleString) String() string            { return proto.CompactTextString(m) }
func (*SingleString) ProtoMessage()               {}
func (*SingleString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SingleString) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type FileInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Size    int64  `protobuf:"varint,2,opt,name=Size" json:"Size,omitempty"`
	Mode    uint32 `protobuf:"varint,3,opt,name=Mode" json:"Mode,omitempty"`
	ModTime int64  `protobuf:"varint,4,opt,name=ModTime" json:"ModTime,omitempty"`
	IsDir   bool   `protobuf:"varint,5,opt,name=IsDir" json:"IsDir,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileInfo) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *FileInfo) GetModTime() int64 {
	if m != nil {
		return m.ModTime
	}
	return 0
}

func (m *FileInfo) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*MkdirInput)(nil), "os.MkdirInput")
	proto.RegisterType((*SingleString)(nil), "os.SingleString")
	proto.RegisterType((*FileInfo)(nil), "os.FileInfo")
	proto.RegisterType((*Empty)(nil), "os.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OS service

type OSClient interface {
	Hostname(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SingleString, error)
	Mkdir(ctx context.Context, in *MkdirInput, opts ...grpc.CallOption) (*Empty, error)
	MkdirAll(ctx context.Context, in *MkdirInput, opts ...grpc.CallOption) (*Empty, error)
	Remove(ctx context.Context, in *SingleString, opts ...grpc.CallOption) (*Empty, error)
	RemoveAll(ctx context.Context, in *SingleString, opts ...grpc.CallOption) (*Empty, error)
	Stat(ctx context.Context, in *SingleString, opts ...grpc.CallOption) (*FileInfo, error)
}

type oSClient struct {
	cc *grpc.ClientConn
}

func NewOSClient(cc *grpc.ClientConn) OSClient {
	return &oSClient{cc}
}

func (c *oSClient) Hostname(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SingleString, error) {
	out := new(SingleString)
	err := grpc.Invoke(ctx, "/os.OS/Hostname", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSClient) Mkdir(ctx context.Context, in *MkdirInput, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/os.OS/Mkdir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSClient) MkdirAll(ctx context.Context, in *MkdirInput, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/os.OS/MkdirAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSClient) Remove(ctx context.Context, in *SingleString, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/os.OS/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSClient) RemoveAll(ctx context.Context, in *SingleString, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/os.OS/RemoveAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSClient) Stat(ctx context.Context, in *SingleString, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/os.OS/Stat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OS service

type OSServer interface {
	Hostname(context.Context, *Empty) (*SingleString, error)
	Mkdir(context.Context, *MkdirInput) (*Empty, error)
	MkdirAll(context.Context, *MkdirInput) (*Empty, error)
	Remove(context.Context, *SingleString) (*Empty, error)
	RemoveAll(context.Context, *SingleString) (*Empty, error)
	Stat(context.Context, *SingleString) (*FileInfo, error)
}

func RegisterOSServer(s *grpc.Server, srv OSServer) {
	s.RegisterService(&_OS_serviceDesc, srv)
}

func _OS_Hostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).Hostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.OS/Hostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).Hostname(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OS_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.OS/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).Mkdir(ctx, req.(*MkdirInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _OS_MkdirAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).MkdirAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.OS/MkdirAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).MkdirAll(ctx, req.(*MkdirInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _OS_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.OS/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).Remove(ctx, req.(*SingleString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OS_RemoveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).RemoveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.OS/RemoveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).RemoveAll(ctx, req.(*SingleString))
	}
	return interceptor(ctx, in, info, handler)
}

func _OS_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/os.OS/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).Stat(ctx, req.(*SingleString))
	}
	return interceptor(ctx, in, info, handler)
}

var _OS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "os.OS",
	HandlerType: (*OSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hostname",
			Handler:    _OS_Hostname_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _OS_Mkdir_Handler,
		},
		{
			MethodName: "MkdirAll",
			Handler:    _OS_MkdirAll_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _OS_Remove_Handler,
		},
		{
			MethodName: "RemoveAll",
			Handler:    _OS_RemoveAll_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _OS_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "os.proto",
}

func init() { proto.RegisterFile("os.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x9b, 0x6e, 0xbb, 0xdb, 0x0e, 0x55, 0x64, 0xf0, 0x10, 0x16, 0x0f, 0x25, 0x08, 0x56,
	0x0f, 0x3d, 0xe8, 0x13, 0x08, 0x2a, 0xf6, 0x50, 0x85, 0xd6, 0x17, 0x58, 0x69, 0x5c, 0x82, 0x4d,
	0x13, 0x9a, 0xb8, 0xa0, 0xef, 0x2e, 0x48, 0xb2, 0x96, 0x55, 0x14, 0xf6, 0xf6, 0xcf, 0xfc, 0x5f,
	0xe6, 0x4f, 0x26, 0x90, 0x28, 0x53, 0xea, 0x51, 0x59, 0x85, 0xa1, 0x32, 0xac, 0x00, 0xa8, 0x5f,
	0x3b, 0x31, 0x56, 0x83, 0x7e, 0xb3, 0x98, 0x01, 0xd1, 0x94, 0xe4, 0xa4, 0x48, 0x1b, 0xa2, 0x5d,
	0x25, 0x69, 0x98, 0x93, 0xe2, 0xa0, 0x21, 0x92, 0x9d, 0x40, 0xd6, 0x8a, 0x61, 0xdd, 0xf3, 0xd6,
	0x8e, 0x62, 0x58, 0x3b, 0xd7, 0x4c, 0xac, 0x61, 0x1b, 0x48, 0xee, 0x44, 0xcf, 0xab, 0xe1, 0x45,
	0x21, 0x42, 0xf4, 0xb0, 0x92, 0xfc, 0xdb, 0xf4, 0xda, 0xf5, 0x5a, 0xf1, 0xc1, 0xfd, 0xb8, 0x59,
	0xe3, 0xb5, 0xeb, 0xd5, 0xaa, 0xe3, 0x74, 0xe6, 0x23, 0xbc, 0x46, 0x0a, 0x8b, 0x5a, 0x75, 0x4f,
	0x42, 0x72, 0x1a, 0x79, 0x74, 0x2a, 0xf1, 0x18, 0xe2, 0xca, 0xdc, 0x88, 0x91, 0xc6, 0x39, 0x29,
	0x92, 0x66, 0x5b, 0xb0, 0x05, 0xc4, 0xb7, 0x52, 0xdb, 0xf7, 0xcb, 0x4f, 0x02, 0xe1, 0x63, 0x8b,
	0xe7, 0x90, 0xdc, 0x2b, 0x63, 0x07, 0x97, 0x99, 0x96, 0xca, 0x94, 0xde, 0x5d, 0x1e, 0x39, 0xf9,
	0xf3, 0xfa, 0x2c, 0xc0, 0x53, 0x88, 0xfd, 0xd3, 0xf1, 0xd0, 0x99, 0xbb, 0x2d, 0x2c, 0x77, 0xe7,
	0x58, 0x80, 0x67, 0x90, 0x78, 0xeb, 0xba, 0xef, 0xf7, 0x81, 0xf3, 0x86, 0x4b, 0xb5, 0xe1, 0xf8,
	0x27, 0xec, 0x37, 0x78, 0x01, 0xe9, 0x16, 0x74, 0x23, 0xf7, 0xb0, 0x05, 0x44, 0xad, 0x5d, 0xd9,
	0x7f, 0xb0, 0xcc, 0x75, 0xa6, 0x95, 0xb3, 0xe0, 0x79, 0xee, 0xff, 0xf4, 0xea, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x2d, 0xda, 0x8c, 0xec, 0xdf, 0x01, 0x00, 0x00,
}
